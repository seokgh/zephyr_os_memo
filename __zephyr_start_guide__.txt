--------------------------------------------------------------------------------
zephyr os 개발환경은 Ubuntu 20.04, 22.04 에서만 지원된다
--------------------------------------------------------------------------------
$ sudo bash kitware-archive.sh 
Only Ubuntu Focal (20.04) and Jammy (22.04) are supported. Aborting.



//
//Guide
//
https://docs.zephyrproject.org/latest/develop/getting_started/index.html




--------------------------------------------------------------------------------
Getting Started Guide
--------------------------------------------------------------------------------

If using an Ubuntu version older than 22.04, it is necessary to add extra repositories to meet the minimum required versions for the main dependencies listed above. In that case, download, inspect and execute the Kitware archive script to add the Kitware APT repository to your sources list. A detailed explanation of kitware-archive.sh can be found here kitware third-party apt repository:

wget https://apt.kitware.com/kitware-archive.sh
sudo bash kitware-archive.sh

Use apt to install the required dependencies:

sudo apt install --no-install-recommends git cmake ninja-build gperf \
  ccache dfu-util device-tree-compiler wget \
  python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \
  make gcc gcc-multilib g++-multilib libsdl2-dev libmagic1

Verify the versions of the main dependencies installed on your system by entering:

cmake --version
python3 --version
dtc --version


--------------------------------------------------------------------------------
Get Zephyr and install Python dependencies
--------------------------------------------------------------------------------
NOTE:
	-------------------------------------------
	[Install globally] Tab 의 설정을 따라 간다!
	-------------------------------------------


Install west, and make sure ~/.local/bin is on your PATH environment variable:

pip3 install --user -U west
echo 'export PATH=~/.local/bin:"$PATH"' >> ~/.bashrc
source ~/.bashrc

Get the Zephyr source code:

west init ~/zephyrproject
cd ~/zephyrproject
west update

Export a Zephyr CMake package. This allows CMake to automatically load boilerplate code required for building Zephyr applications.

west zephyr-export

Zephyr’s scripts/requirements.txt file declares additional Python dependencies. Install them with pip3.

pip3 install --user -r ~/zephyrproject/zephyr/scripts/requirements.txt


--------------------------------------------------------------------------------
Install the Zephyr SDK
--------------------------------------------------------------------------------
1. Download and verify the Zephyr SDK bundle:

cd ~
wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.5/zephyr-sdk-0.16.5_linux-x86_64.tar.xz
wget -O - https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.16.5/sha256.sum | shasum --check --ignore-missing

If your host architecture is 64-bit ARM (for example, Raspberry Pi), replace x86_64 with aarch64 in order to download the 64-bit ARM Linux SDK.

2. Extract the Zephyr SDK bundle archive:

tar xvf zephyr-sdk-0.16.5_linux-x86_64.tar.xz


3. Run the Zephyr SDK bundle setup script:

cd zephyr-sdk-0.16.5
./setup.sh


4. Install udev rules, which allow you to flash most Zephyr boards as a regular user:

sudo cp ~/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/contrib/60-openocd.rules /etc/udev/rules.d
sudo udevadm control --reload



--------------------------------------------------------------------------------
Build sample and flash
--------------------------------------------------------------------------------
설치Path: ~/zephyrproject 에 들어가서 예제를 Build & Flash하면 된다:

enter sample directory:
-------------------------------
	$ cd ~/zephyrproject/zephyr

build:
-------------------------------
	west build -p always -b <your-board-name> samples/basic/hello_world
	west build -p always -b <your-board-name> samples/basic/blinky

	$ west build -p always -b nucleo_h743zi samples/hello_world/
	$ west build -p always -b nucleo_h743zi samples/basic/blinky

flash:
-------------------------------
	$ west flash

	//NOTE:
		NUCLEO-H743ZI 보드에서는 Reset 버튼을 누른 상태에서 이 명령을 실행해야 한다?
		저 위에 sample 코드를 빌드하면, build 라는 폴더가 생기고,  그 안에서 /build/zephyr/zephyr.hex 라는 파일을 찾아서 flash 한다.


//flash log
-------------------------------
seokgh@Ubuntu22 ~/zephyrproject/zephyr (main) $ west flash
-- west flash: rebuilding
[1/1] cd /home/seokgh/zephyrproject/zephyr/build/zephyr && /usr/bin/python3 /home/seokgh/zephyrproject/zephyr/scripts/build/check_init_priorities.py --elf-file=/home/seokgh/zephyrproject/zephyr/build/zephyr/zephyr.elf
-- west flash: using runner openocd
-- runners.openocd: Flashing file: /home/seokgh/zephyrproject/zephyr/build/zephyr/zephyr.hex
Open On-Chip Debugger 0.11.0+dev-00728-gb6f95a16c (2024-01-31-11:34)
Licensed under GNU GPL v2
For bug reports, read
	http://openocd.org/doc/doxygen/bugs.html
Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD
init
Info : clock speed 1800 kHz
Info : STLINK V3J13M4 (API v3) VID:PID 0483:374E
Info : Target voltage: 3.291611
Info : [stm32h7x.cpu0] Cortex-M7 r1p1 processor detected
Info : [stm32h7x.cpu0] target has 8 breakpoints, 4 watchpoints
Error: read_memory: read at 0x5c001004 with width=32 and count=1 failed
Error executing event examine-end on target stm32h7x.cpu0:
/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg:235: Error: read_memory: failed to read memory
in procedure 'init'
in procedure 'stm32h7x_dbgmcu_mmw' called at file "/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg", line 168
in procedure 'stm32h7x_mmw' called at file "/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg", line 258
in procedure 'stm32h7x_mrw' called at file "/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg", line 240
at file "/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg", line 235
Info : starting gdb server for stm32h7x.cpu0 on 3333
Info : Listening on port 3333 for gdb connections
Error: read_memory: read at 0x5c001004 with width=32 and count=1 failed
Error executing event examine-end on target stm32h7x.cpu0:
/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg:235: Error: read_memory: failed to read memory
in procedure 'init'
in procedure 'ocd_process_reset'
in procedure 'ocd_process_reset_inner' called at file "embedded:startup.tcl", line 876
in procedure 'stm32h7x_dbgmcu_mmw' called at file "/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg", line 168
in procedure 'stm32h7x_mmw' called at file "/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg", line 258
in procedure 'stm32h7x_mrw' called at file "/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg", line 240
at file "/home/seokgh/zephyr-sdk-0.16.5/sysroots/x86_64-pokysdk-linux/usr/share/openocd/scripts/target/stm32h7x.cfg", line 235
target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x08001130 msp: 0x24080000
    TargetName         Type       Endian TapName            State
--  ------------------ ---------- ------ ------------------ ------------
 0* stm32h7x.cpu0      hla_target little stm32h7x.cpu       halted

target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x08001130 msp: 0x24080000
Info : Unable to match requested speed 4000 kHz, using 3300 kHz
Info : Unable to match requested speed 4000 kHz, using 3300 kHz
Info : Device: STM32H74x/75x
Info : flash size probed value 2048k
Info : STM32H7 flash has dual banks
Info : Bank (0) size is 1024 kb, base address is 0x08000000
Info : Padding image section 0 at 0x08003d4a with 22 bytes (bank write end alignment)
Warn : Adding extra erase range, 0x08003d60 .. 0x0801ffff
auto erase enabled
wrote 15712 bytes from file /home/seokgh/zephyrproject/zephyr/build/zephyr/zephyr.hex in 1.040588s (14.745 KiB/s)

target halted due to debug-request, current mode: Thread
xPSR: 0x01000000 pc: 0x080006d0 msp: 0x24001140
shutdown command invoked


--------------------------------------------------------------------------------
zephyr os 가 지원하는 board list 보기:
--------------------------------------------------------------------------------
seokgh@Ubuntu22 ~/zephyrproject $ west boards

	NOTE:
		반드시 설치 Path: ~/zephyrproject 에 들어가서 west boards 명령을 쳐야한다.

	같은 MCU Chip 이어도, board 가 다를 수 있으므로 잘 봐야하다. 예로, 아래 2보드는 다 stm32h7 시리즈다:
	nucleo_h743zi
	stm32h735g_disco

//
//board file
//
seokgh@Ubuntu22 ~/zephyrproject/zephyr/boards/arm/nucleo_h743zi (main) $ tree
.
├── arduino_r3_connector.dtsi
├── board.cmake
├── doc
│   ├── img
│   │   └── nucleo_h743zi.jpg
│   └── index.rst
├── Kconfig.board
├── Kconfig.defconfig
├── nucleo_h743zi_defconfig
├── nucleo_h743zi.dts
├── nucleo_h743zi.yaml
└── support
    └── openocd.cfg

3 directories, 10 files





----------------------------------------------------------------------------------------------------------------------------------------------------------------
How to build your Zephyr app in a standalone folder?
(Zephyr 개발환경 설치 가이드에서 default로 지정한 Path: ~/zephyrproject/zephyr/ 을 벗어나서, 따로 폴더 만들어서 개발하기)
----------------------------------------------------------------------------------------------------------------------------------------------------------------
step 1
-------------------------------------------------------------
cp -r ~/zephyrproject/zephyr/samples/basic/blinky ~/.

	Here are the more verbose steps:
		Create a directory for your app
		Add CMakeLists.txt
		Create a src subdirectory and add main.c file to it

	That sets up the directory.
	You now have a folder in your home directory called blinky.
	Like many zephyr samples, this includes the source files (src folder), a project file (prj.conf), CMake directives (CMakeLists.txt), a readme file (README.rst), and a yaml file (sample.yaml).
	More complex examples might have a boards directory (boards) that has hardware specific configurations.


step 2
-------------------------------------------------------------
source ~/zephyrproject/zephyr/zephyr-env.sh

	Each time you begin a new terminal session, source this helper file.

	If you are working with the Nordic fork of Zephyr, simply source the same file from that tree:

		source ~/zephyr-nrf/zephyr/zephyr-env.sh

	* Don’t forget that each time you begin a new terminal session (no matter what tree you’re in) you need to enable your Python virtual environment and set up the build environment.


Here’s an example of how I start an ESP32 development session:
-------------------------------------------------------------
mike@golioth ~ $ cd ~/blinky
mike@golioth ~/blinky $ source ~/zephyrproject/.venv/bin/activate						// 개발환경 설치 시, 
(.venv) mike@golioth ~/blinky $ source ~/zephyrproject/zephyr/zephyr-env.sh					// [Install within virtual environment] 의 step 을 밟으면 이렇게 나온다
(.venv) mike@golioth ~/blinky $ export ESPRESSIF_TOOLCHAIN_PATH="/home/mike/.espressif/tools/zephyr"		// [Install globally] 은 내가 밟은 step. 크게 상관은 없다.
(.venv) mike@golioth ~/blinky $ export ZEPHYR_TOOLCHAIN_VARIANT="espressif"
(.venv) mike@golioth ~/blinky $ west build -b esp32 . -p

Here’s the same process, but for a Nordic-based board.
-------------------------------------------------------------
Note two things:
	I didn’t need to set up the toolchain variables like I did with ESP32, and the binaries for different hardware can be built in the same tree using different toolchains–a powerful perk of using Zephyr.

mike@golioth ~ $ cd ~/blinky											//
mike@golioth ~/blinky $ source ~/zephyrproject/.venv/bin/activate						//
(.venv) mike@golioth ~/blinky $ source ~/zephyr-nrf/zephyr/zephyr-env.sh					//
(.venv) mike@golioth ~/blinky $ west build -b thingy91_nrf9160_ns . -p						//

TIP:
	The ESP32 example above will not build the blinky app unless you add an esp32.overlay file to configure the &led0 alias that main.c needs to attach to an LED.
	The Thiny91 doesn’t have this limitation. That particular dev board has an LED included, so &led0 is already specified in the dts file within the Zephyr toolchain.


