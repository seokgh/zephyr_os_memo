ZephyrOS Device Teee
--------------------------------------------------------------------------------
Linux Kernel 과 다른 점:

	dtb 를 생성하는 게 아니고, .h 파일을 생성한다!


약도:

+-----------+                          +----------------------------+
|           |          script          |                            |
|   dts     |     (gen_defines.py)     |                            |
|   dtsi    +------------------------->| device_tree_unfixed.h      |
|   overlay |     (zephyr.dts.pre)     |                            +----+
|           |                          | 하드웨어 서술 C 매크로          |    |           +-----------+                  +--------------+
+-----------+                          |                            |    |           |           |                  |              |
                                       +----------------------------+    |  compile  | driver.a  |    link          |  zephyr.elf  |
                                                                         +----------->           +------------------>              |
                                               +--------------------+    |           |           |                  |              |
                                               |   driver.c         |    |           |           |                  |              |
                                               |                    +----+           +-----------+                  +--------------+
                                               |   driver.h         |
                                               +--------------------+


--------------------------------------------------------------------------------
ZephyrOS Device Teee Build flow
--------------------------------------------------------------------------------
Step1:
--------------------
	.dtsi
	.dts	 --------> zephyr.dts.pre 파일생성
	.overlay


		dts 파일을 읽을 때, 준수하면 좋은 순서:

			.overlay ---> board.dts ---> other.dtsi

		약도:
						.overlay
					   	   |
					   	   | (덮어쓴다)
			soc.dtsi	(참조)	   V
				    <---------- board.dts ----------> zephyr.dts.pre
			common.dts				       (zephyr.dts)


Step2:
--------------------
	dtsi, dts, overlay 파일들만 가지고는, 빌드할 때, 어떤 정보들이 Device Driver 에 사용되어야 하는지 모른다.
	(즉, device_tree_unfixed.h 에 macro 를 생성해야 하는 대상들을  명확히 모른다)

	그래서
	.yaml 파일(binding) 을 추가로 만들어서, device_tree_unfixed.h 파일속의 macro 로 변환해야 하는 dts 파일들을 결정한다.
	.yaml 파일들속의 규칙에 의해, 다음 파일을 생성:

						gen_defines.py
		zephyr.dts.pre -------------------------------------------------> device_tree_unfixed.h
				          	*.yaml
					(device node 의 "compatible" 속성)

			NOTE:
				1. dts 파일속의 모든 node들을 .yaml 파일과 비교해서 매칭이 되면, C Macro 1개를 생성하는 로직.
				2. dts 파일속의 device node 의 "compatible" 속성 이름으로 .yaml 파일을 찾는다.

--------------------------------------------------------------------------------
.yaml, .dts, driver.c	3 자의 관계
--------------------------------------------------------------------------------
	bindings.yaml
		\
		 \ (binding)
		  \
		   v
		 dts node
			\
			 \ (parameter 로써 전달)
			  \
			   v
			driver.c


Ex)
--------------------
			  (binding)                      (parameter 로써 전달)
	gpio-leds.yaml ----------------> device node  -----------------------------> led_gpio.c
					  "gpio-leds"					driver



--------------------------------------------------------------------------------
ZephyrOS dts -> c macro (device_tree_unfixed.h) 생성 규칙
--------------------------------------------------------------------------------
dts node:
	DT_***_<node>_<unit-address>
	DT_***_INST_<instance-number>_<compatible>

dts node property:
	DT_***_<node>_<property>

dts node compatible:
	DT_***_COMPAT_MATCHES_<compatible>


--------------------------------------------------------------------------------
생성된 device_tree_unfixed.h 파일속의 macro 를 코드에서 사용하는 방법
--------------------------------------------------------------------------------
	DEVICE_DT_GET(node_id)			// node id 로 device 취득
	DEVICE_DT_GET_ANY(compat)		// compatible 로 device 취득
	DEVICE_DT_GET_ONE(compat)		// compatible 로 device 취득
	DEVICE_DT_GET_OR_NULL(node_id)		// node를 "okey" 했는지 판단
	DEVICE_GET(name)			// name(label 속성) 로 device 취득



	device_get_binding(name)		// name(label 속성) 로 device 취득

	device_is_ready(device)			// device instance 를 나타내는 구조체 struct device {} 가 유효한지 판단







